{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","country","setCountry","name","setName","flag","setFlag","capital","setCapital","population","setPopulation","languages","setLanguages","bool","setBool","weather","setWeather","weatherImg","setWeatherImg","wind","setWind","windDirection","setWindDirection","window","onload","axios","get","then","res","num","Math","floor","random","data","length","forFilterName","filtered","filter","filt","map","mp","langs","temperature","current","temp_c","condition","icon","wind_mph","wind_dir","showFiltered","e","toLowerCase","target","accessKey","id","className","placeholder","value","onChange","event","onClick","indexOf","src","index","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1c24a8a.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport ReactDOM from 'react-dom'\nimport './App.css'\nimport axios from 'axios'\n\n\n\n\nconst App = () => {\n  const [country, setCountry]= useState('')\n  const [name, setName] = useState([])\n  const [flag, setFlag] = useState('')\n  const [capital, setCapital] = useState('')\n  const [population, setPopulation] = useState('')\n  const [languages, setLanguages]= useState([])\n  const [bool, setBool] = useState(4)\n  const [weather, setWeather] = useState([])\n  const [weatherImg, setWeatherImg] = useState('')\n  const [wind, setWind]= useState('')\n  const [windDirection, setWindDirection]= useState('')\n\n\nwindow.onload = () => {\n  axios\n  .get('https://restcountries.eu/rest/v2/all')\n  .then(res => {\n  let num = Math.floor(Math.random()* res.data.length)\n  let forFilterName = res.data[num].name\n  let filtered = res.data.filter((filt) => {\n    return(\n      filt.name === forFilterName\n    )\n  })\n    setBool(1)\n    setName(filtered.map(mp=>mp.name));\n    setFlag(filtered.map(mp=>mp.flag));\n    setCapital(filtered.map(mp=>mp.capital));\n    setPopulation(filtered.map(mp=>mp.population));\n    let langs = filtered.map(mp => mp.languages);\n    setLanguages(langs[0].map(mp=> mp.name));\n    axios\n    .get(`https://api.weatherapi.com/v1/current.json?key=3b4b28f5adc74f5ea6895442212202&q=${filtered.map(mp=>mp.capital)}`)\n    .then(res => {\n      setWeather({temperature: res.data.current.temp_c})\n      setWeatherImg(res.data.current.condition.icon)\n      setWind(res.data.current.wind_mph)\n      setWindDirection(res.data.current.wind_dir)\n    })\n  })\n}\n \n\n\n\n\n\n  \n\n  let show = () => {\n    axios\n  .get('https://restcountries.eu/rest/v2/all')\n  .then(res => {\n    let filtered = res.data.filter((filt) => {\n      return(\n        filt.name.toLowerCase().indexOf(country.toLowerCase()) >=0\n      )\n    })\n    if(filtered.length > 0 && filtered.length<2) {\n      setBool(1)\n      setName(filtered.map(mp=>mp.name));\n      setFlag(filtered.map(mp=>mp.flag));\n      setCapital(filtered.map(mp=>mp.capital));\n      setPopulation(filtered.map(mp=>mp.population));\n      let langs = filtered.map(mp => mp.languages);\n      setLanguages(langs[0].map(mp=> mp.name));\n      axios\n      .get(`https://api.weatherapi.com/v1/current.json?key=3b4b28f5adc74f5ea6895442212202&q=${filtered.map(mp=>mp.capital)}`)\n      .then(res => {\n        setWeather({temperature: res.data.current.temp_c})\n        setWeatherImg(res.data.current.condition.icon)\n        setWind(res.data.current.wind_mph)\n        setWindDirection(res.data.current.wind_dir)\n      })\n\n\n      setCountry('');\n    }else if(filtered.length > 1){\n        setBool(2);\n        setName(filtered.map(mp => mp.name));\n    }else{\n      setBool(0);\n    }\n  })\n  }\nlet showFiltered = (e) => {\n  axios\n  .get('https://restcountries.eu/rest/v2/all')\n  .then(res => {\n    let filtered = res.data.filter((filt) => {\n      return(\n        filt.name.toLowerCase() === e.target.accessKey.toLowerCase()\n      )\n    })\n      setBool(1)\n      setName(filtered.map(mp=>mp.name));\n      setFlag(filtered.map(mp=>mp.flag));\n      setCapital(filtered.map(mp=>mp.capital));\n      setPopulation(filtered.map(mp=>mp.population));\n      let langs = filtered.map(mp => mp.languages);\n      setLanguages(langs[0].map(mp=> mp.name));\n      axios\n      .get(`https://api.weatherapi.com/v1/current.json?key=3b4b28f5adc74f5ea6895442212202&q=${filtered.map(mp=>mp.capital)}`)\n      .then(res => {\n        setWeather({temperature: res.data.current.temp_c})\n        setWeatherImg(res.data.current.condition.icon)\n        setWind(res.data.current.wind_mph)\n        setWindDirection(res.data.current.wind_dir)\n      })\n\n      setCountry('');\n      setBool(3)\n  })\n}\n\n \n\nlet countryChange = (event) => {\n  setCountry(event.target.value);\n}\n\n\n\n  return(\n    <div id='div'>\n      <div id='inputDiv'>\n         <p>find countries</p>\n           <input className='input' placeholder='enter the country name' value = {country} onChange={countryChange} ></input>\n          <button className='btn btn-primary' onClick={show}>search</button>\n      </div>    \n <div className='countriesDiv'>   \n {\nbool == 1?\n    <div className='bool1Div1'>\n        <div className='elem1'>\n             <img id='img' src={flag}/>\n          </div>\n\n           <div className='elem2'>\n              <p className='header' id='name'>{name}</p>\n                 <p><strong>Capital</strong>: {capital}</p>\n                 <p><strong>Population</strong>: {population}</p>\n           </div>\n\n           <div className='elem3'>\n                    <p className='header'>Spoken Languages</p>\n               <ul>\n                   {languages.map((mp,index) => {\n                      return(\n                      <li key={index}><strong>{mp}</strong></li>\n                     )\n                    })}\n               </ul>\n          </div>\n         \n            <div className='elem4'>\n                 <p className='header'>Weather in {capital}</p>\n                  <p><strong>temperature</strong>: {weather.temperature} Celsius</p>\n                <img src={weatherImg} />\n            <p><strong>Wind</strong>: {wind}mph <strong>Direction</strong>: {windDirection}</p>\n         </div>\n    </div> \n    \n :bool == 2?\n       <div className='bool2Div'>\n          <ul>\n            <h1>list of countries</h1>\n                 {name.map((mp, index) => {\n                    return(\n                      <div id='filteredDiv'>\n                         <div id='filteredLiDiv'>\n                            <li  key={index}>{mp}</li>\n                          </div>\n                         <div id='filteredButtonDiv'>\n                            <button id='filteredButton' className='btn btn-info' accessKey={mp} key={index}   onClick={showFiltered}>show</button>\n                         </div>\n                      </div>\n                    )\n                   })}\n           </ul>\n       </div>\n  :bool==3? \n  <div className='bool1Div'>\n              <div className='elem1'>\n                   <img id='img' src={flag}/>\n                </div>\n\n                 <div className='elem2'>\n                     <p className='header' id='name'>{name}</p>\n                      <p><strong>Capital</strong>: {capital}</p>\n                    <p><strong>Population</strong>: {population}</p>\n                  </div>\n\n          <div className='elem3'>\n              <p className='header'>Spoken Languages</p>\n                <ul>\n                  {languages.map((mp,index) => {\n                     return(\n                     <li key={index}><strong>{mp}</strong></li>\n                    )\n                   })}\n              </ul>\n           </div>\n   \n        <div className='elem4'>\n           <p className='header'>Weather in {capital}</p>\n            <p><strong>temperature</strong>: {weather.temperature} Celsius</p>\n            <img src={weatherImg} />\n          <p><strong>Wind</strong>: {wind}mph <strong>Direction</strong>: {windDirection}</p>\n       </div>\n</div> \n\n  :bool==4? \n  <div className='bool1Div'>\n  <div className='elem1'>\n       <img id='img' src={flag}/>\n    </div>\n\n     <div className='elem2'>\n         <p className='header' id='name'>{name}</p>\n          <p><strong>Capital</strong>: {capital}</p>\n        <p><strong>Population</strong>: {population}</p>\n      </div>\n\n                 <div className='elem3'>\n                   <p className='header'>Spoken Languages</p>\n                     <ul>\n                       {languages.map((mp,index) => {\n                          return(\n                          <li key={index}><strong>{mp}</strong></li>\n                         )\n                        })}\n                   </ul>\n                 </div>\n\n                      <div className='elem4'>\n                          <p className='header'>Weather in {capital}</p>\n                           <p><strong>temperature</strong>: {weather.temperature} Celsius</p>\n                        <img src={weatherImg} />\n                       <p><strong>Wind</strong>: {wind}mph </p> <br />\n                     <p><strong>Direction</strong>: {windDirection}</p>\n                     </div>\n                     \n                 </div> \n     \n  : console.log('araferi ar gamova aqedan.')}\n </div>\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}